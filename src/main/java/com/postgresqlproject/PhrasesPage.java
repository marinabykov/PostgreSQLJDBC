/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.postgresqlproject;

import java.awt.Rectangle;
import java.io.File;
import java.io.FileReader;
import java.io.Reader;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.JOptionPane;

/**
 *
 * @author Marina Bykov
 */
public class PhrasesPage extends javax.swing.JFrame {
    SQLqueries connectedDB;
    List<Phrase> phrases;
    List<PhraseAppearance> appearances;
    int lastWordLengthInSelectedPhrase;
    
    /**
     * Creates new form PhrasesPage
     */
    public PhrasesPage(SQLqueries currentDB) {
        this.connectedDB = currentDB;
        try {
            phrases = connectedDB.getPhrases();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
            ex.getMessage(),
            "Failed to get phrases from db",
            JOptionPane.ERROR_MESSAGE);
            phrases = new ArrayList<Phrase>();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        phraseTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        phraseAppearanceTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        songText = new javax.swing.JTextArea();
        addPhraseTextField = new javax.swing.JTextField();
        addPhraseButton = new javax.swing.JButton();
        addFromTextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Select phrase to search. If desired phrase doesn't exist in list, you can add new by typing in and click \"Add phrase\".");

        jLabel2.setText("To add phrase from text, mark this phrase and click \"Add phrase from text\".");

        phraseTable.setModel(new PhrasesTableModel(phrases));
        phraseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phraseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(phraseTable);

        phraseAppearanceTable.setModel(new PhraseAppearanceTableModel(appearances));
        phraseAppearanceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phraseAppearanceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(phraseAppearanceTable);

        songText.setColumns(20);
        songText.setRows(5);
        songText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                songTextCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane3.setViewportView(songText);

        addPhraseButton.setText("Add phrase");
        addPhraseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPhraseButtonActionPerformed(evt);
            }
        });

        addFromTextButton.setText("Add phrase from text");
        addFromTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFromTextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPhraseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(addPhraseButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(addFromTextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPhraseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPhraseButton))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addFromTextButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPhraseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPhraseButtonActionPerformed
        String newPhrase = addPhraseTextField.getText();
        String[] phraseSplitted = newPhrase.split(" ");
        //if phrase text not empty, try to add to db.
        if(!(newPhrase.isBlank() || newPhrase.isEmpty())) {
            PhrasesTableModel model = (PhrasesTableModel)phraseTable.getModel();
            //If this phrase already exist, show message to select from list?
            if(model.existingPhrase(newPhrase))
            {
                JOptionPane.showMessageDialog(this,
                "This phrase already exist in list, please select from list",
                "This phrase already in list",
                JOptionPane.ERROR_MESSAGE);
            }
            //Show message if has only one word
            else if(phraseSplitted.length == 1){
                JOptionPane.showMessageDialog(this,
                "This phrase phrase has only 1 word, please select phrase longer than 1 word or use search words page.",
                "Please add phrase longer than 1 word",
                JOptionPane.ERROR_MESSAGE);
            }
            else {
                try {
                    int phraseId = connectedDB.addPhrase(newPhrase);
                    model.addRow(new Phrase(newPhrase, 0, phraseId));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Failed to add new phrase to db",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
    }//GEN-LAST:event_addPhraseButtonActionPerformed

    private void phraseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phraseTableMouseClicked
        
        int row = phraseTable.getSelectedRow();
        PhrasesTableModel phrasesModel = (PhrasesTableModel)phraseTable.getModel();
        Phrase selectedPhrase = phrasesModel.getPhraseByRow(row);
        //get length of last word, needed in order to know end of highlight 
        lastWordLengthInSelectedPhrase = selectedPhrase.getLastWordLength();
        
        try {
            //try to get all phrase appearances and update table with result
            appearances = connectedDB.getPhraseAppearances(selectedPhrase.getPhraseId());
            phraseAppearanceTable.setModel(new PhraseAppearanceTableModel(appearances));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
            ex.getMessage(),
            "Failed to get phrase appearances",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_phraseTableMouseClicked

    private void phraseAppearanceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phraseAppearanceTableMouseClicked
        //get selected phrase appearance from table
        int row = phraseAppearanceTable.getSelectedRow();
        PhraseAppearanceTableModel model = 
                (PhraseAppearanceTableModel)phraseAppearanceTable.getModel();    
        PhraseAppearance selectedPhraseAppearance = model.getPhraseAppearanceByRow(row);
        //Open text of selectedPhraseAppearance file 
        Reader reader = null;
        try {
            int phraseStartPosition = selectedPhraseAppearance.getStartPosition();
            int phraseEndPosition = selectedPhraseAppearance.getStartPositionLastWord() 
                    + lastWordLengthInSelectedPhrase;
            reader = new FileReader(new File(selectedPhraseAppearance.getFilePath()));
            songText.read(reader, null);
            Rectangle viewRect = songText.modelToView(phraseStartPosition);
            // Scroll to make the rectangle visible
            songText.scrollRectToVisible(viewRect);
            // Focus the text area, otherwise the highlighting won't show up
            songText.requestFocusInWindow();
            // Highlight the text
            songText.setCaretPosition(phraseEndPosition);
            songText.moveCaretPosition(phraseStartPosition);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
            "Failed to open text file",
            "Failed to open text file",
            JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                reader.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_phraseAppearanceTableMouseClicked

    private void songTextCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_songTextCaretPositionChanged
        // Get selected text in table and add
        String selectedPhraseFromText = songText.getSelectedText();
        if(!(selectedPhraseFromText.isEmpty() || selectedPhraseFromText.isBlank())) {
            PhrasesTableModel model = (PhrasesTableModel)phraseTable.getModel();

            //Don't add phrase if it is already exist
            if(model.existingPhrase(selectedPhraseFromText))
            {
                JOptionPane.showMessageDialog(this,
                "This phrase already exist in list, please select from list",
                "This phrase already in list",
                JOptionPane.ERROR_MESSAGE);
            }
            else {
                try {
                    int phraseId = connectedDB.addPhrase(selectedPhraseFromText);
                    model.addRow(new Phrase(selectedPhraseFromText, phraseId));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Failed to add new phrase to db",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_songTextCaretPositionChanged

    private void addFromTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFromTextButtonActionPerformed
        
        String selectedPhraseFromText = songText.getSelectedText();
        if(!(Objects.isNull(selectedPhraseFromText) || selectedPhraseFromText.isBlank())) {
            PhrasesTableModel model = (PhrasesTableModel)phraseTable.getModel();

            if(model.existingPhrase(selectedPhraseFromText))
            {
                JOptionPane.showMessageDialog(this,
                "This phrase already exist in list, please select from list",
                "This phrase already in list",
                JOptionPane.ERROR_MESSAGE);
            }
            else {
                try {
                    int phraseId = connectedDB.addPhrase(selectedPhraseFromText);
                    model.addRow(new Phrase(selectedPhraseFromText, phraseId));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Failed to add new phrase to db",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_addFromTextButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFromTextButton;
    private javax.swing.JButton addPhraseButton;
    private javax.swing.JTextField addPhraseTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable phraseAppearanceTable;
    private javax.swing.JTable phraseTable;
    private javax.swing.JTextArea songText;
    // End of variables declaration//GEN-END:variables
}
